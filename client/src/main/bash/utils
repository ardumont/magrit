shopt -s compat31

function _getRemote {
	remote=$(git config --get magrit.remote)
	if [[ "$remote" == "" ]]; then
		remote='magrit'
	fi
	echo $remote
}

_USER=0
_HOST=1
_PORT=2
_REPO=3

_target[_USER]=""
_target[_HOST]=""
_target[_PORT]=""
_target[_REPO]=""
function _getSsh {
	if [ -z ${_target[$_HOST]} ]; then
		remote=$(_getRemote)
		
		ssh_url=$(git config --local remote.${remote}.url)
		
		ssh_url=${ssh_url:6}
		user=${ssh_url%@*}
		ssh_url=${ssh_url#*@}
		host=${ssh_url%:*}
		ssh_url=${ssh_url#*:}
		port=${ssh_url%/*}
		repo="/${ssh_url#*/}/"
		
		_target[$_USER]=$user
		_target[$_HOST]=$host
		_target[$_PORT]=$port
		_target[$_REPO]=$repo
	fi
}

function _sendSshCommand {
	_getSsh
	
	user=${_target[$_USER]}
	host=${_target[$_HOST]}
	port=${_target[$_PORT]}
	
	if [ "$1" = "--raw" ]
	then
		shift 1
		ssh -x -p $port $user@$host $*
	else
		ssh -x -p $port $user@$host $* || echo "ssh error: $?"
	fi
}

function _checkSsh {
	# backup bash options
	setBackup=$(set +o)
	set +e

	# make a ping
	_sendSshCommand --raw magrit ping >/dev/null 2>/dev/null
	status=$?

	# restore bash options
	eval $setBackup 2> /dev/null

	# handle bad response
	if [ $status -eq 255 ]
	then
		echo "Unable to reach server at ${user}@${host}:${port}"
		exit 1
	fi
}

function _sendSshCommandBg {
	in=$1
	out=$2
	shift 2
	
	tail -f $in | _sendSshCommand $* >$out &
}

function _color {
	echo -e "\x1b[${1}m"
}

error=$(_color "91")
warning=$(_color "36")
running=$(_color "1;33")
pending=$(_color "1;34")
cool=$(_color "92")
clear=$(_color "0")

_color=$(git config --get color.ui || echo "none")
if [ $_color = "auto" ]; then
	_color=1
	_colorAction=always
elif [ $_color = "always" ]; then
	_color=1
	_colorAction=always
else
	_color=0
	_colorAction=never
fi

# $1 is the text to colorize
# $2 is the color code
function _colorize {
	if [ $_color -eq 1 ]; then
		echo $1 | sed -e "s/^/$(_color $2)/" -e "s/$/${clear}/"
	else
		echo $1
	fi
}

function _colorizeStatus {
	if [ $_color -eq 1 ]; then
		echo $1 | sed \
			-e "s/O/${cool}O${clear}/g" \
			-e "s/E/${error}E${clear}/g" \
			-e "s/R/${running}R${clear}/g" \
			-e "s/P/${pending}P${clear}/g" \
			-e "s/?/${warning}?${clear}/g"
	else
		echo $1
	fi
}

_logWidth=$(git config --get --int magrit.log.maxWidth || echo "60")
let "_logWidth += 8"
MIN=20
MAX=100
if [ $_logWidth -lt $MIN ]; then
	_logWidth=$MIN
elif [ $_logWidth -gt $MAX ]; then
	_logWidth=$MAX
fi

if [ $_color -eq 1 ]; then
	let "_logWidth += 8"
fi

_logBlanks=$(for i in $(seq $_logWidth); do echo -n ' '; done)

function _ellipsis {
	text="$1"
	len=${#text}
	text="${text:0:$_logWidth}${_logBlanks:$len}"
	lineEnd=" "
	if [ $len -ge $_logWidth ]
	then
		lineEnd="\u2026"
	fi
	echo -e "$text$lineEnd"
}

